{"version":3,"file":"linq-for-js.min.js","sources":["../src/iterators/Iterator.js","../src/iterators/DistinctIterator.js","../src/iterators/SelectIterator.js","../src/iterators/SelectManyIterator.js","../src/iterators/SkipIterator.js","../src/iterators/TakeIterator.js","../src/iterators/WhereIterator.js","../src/iterators/TakeWhileIterator.js","../src/aggregate/Array.prototype.aggregate.js","../src/aggregate/Iterator.aggregate.js","../src/all/Array.prototype.all.js","../src/all/Iterator.all.js","../src/any/Array.prototype.any.js","../src/first/Array.prototype.first.js","../src/where/Array.prototype.where.js","../src/where/Iterator.where.js","../src/first/Iterator.first.js","../src/any/Iterator.any.js","../src/average/Array.prototype.average.js","../src/average/Iterator.average.js","../src/contains/Array.prototype.contains.js","../src/contains/Iterator.contains.js","../src/count/Array.prototype.count.js","../src/count/Iterator.count.js","../src/distinct/Array.prototype.distinct.js","../src/distinct/Iterator.distinct.js","../src/elementAt/Array.prototype.elementAt.js","../src/elementAt/Iterator.elementAt.js","../src/max/Array.prototype.max.js","../src/max/Iterator.max.js","../src/min/Array.prototype.min.js","../src/min/Iterator.min.js","../src/select/Array.prototype.select.js","../src/select/Iterator.select.js","../src/selectMany/Array.prototype.selectMany.js","../src/selectMany/Iterator.selectMany.js","../src/single/Array.prototype.single.js","../src/single/Iterator.single.js","../src/skip/Array.prototype.skip.js","../src/skip/Iterator.skip.js","../src/sum/Array.prototype.sum.js","../src/sum/Iterator.sum.js","../src/take/Array.prototype.take.js","../src/take/Iterator.take.js","../src/takeWhile/Array.prototype.takeWhile.js","../src/takeWhile/Iterator.takeWhile.js"],"sourcesContent":["export default class Iterator {\n  constructor(arr) {\n    if (!arr) {\n      throw new Error('Iterable array is null or undefined');\n    }\n    if (!(arr instanceof Array || arr instanceof Iterator)) {\n      throw new Error('Invalid array type');\n    }\n\n    this.arr = arr;\n  }\n\n  [Symbol.iterator]() {\n    return this.arr[Symbol.iterator]();\n  }\n\n  toArray() {\n    return Array.from(this);\n  }\n\n  toMap(keySelector, valueSelector) {\n    if (typeof keySelector !== 'function') {\n      throw new Error('KeySelector must be a function.');\n    }\n    if (typeof valueSelector !== 'function') {\n      throw new Error('ValueSelector must be a function.');\n    }\n\n    let map = new Map();\n    for (let item of this) {\n      map.set(keySelector(item), valueSelector(item));\n    }\n\n    return map;\n  }\n}\n","import Iterator from './Iterator';\n\nexport default class DistinctIterator extends Iterator {\n  constructor(arr) {\n    super(arr);\n  }\n\n  *[Symbol.iterator]() {\n    let set = new Set();\n    for (let item of this.arr) {\n      if (set.has(item)) {\n        continue;\n      }\n\n      set.add(item);\n      yield item;\n    }\n  }\n}\n","import Iterator from './Iterator';\n\nexport default class SelectIterator extends Iterator {\n  constructor(arr, callback) {\n    super(arr);\n\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n\n    this.callback = callback;\n  }\n\n  *[Symbol.iterator]() {\n    for (let item of this.arr) {\n      yield this.callback(item);\n    }\n  }\n}\n","import Iterator from './Iterator';\n\nexport default class SelectManyIterator extends Iterator {\n  constructor(arr, callback) {\n    super(arr);\n\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n\n    this.callback = callback;\n  }\n\n  *[Symbol.iterator]() {\n    for (let item of this.arr) {\n      for (let subItem of this.callback(item)) {\n        yield subItem;\n      }\n    }\n  }\n}\n","import Iterator from './Iterator';\n\nexport default class SkipIterator extends Iterator {\n  constructor(arr, count) {\n    super(arr);\n\n    if (isNaN(count)) {\n      throw new Error('Missing count.');\n    }\n\n    if (count < 0) {\n      throw new Error('Count cannot be negative.');\n    }\n\n    this.count = count;\n  }\n\n  *[Symbol.iterator]() {\n    let index = this.count;\n    for (let item of this.arr) {\n      if (index-- > 0) {\n        continue;\n      } else {\n        yield item;\n      }\n    }\n  }\n}\n","import Iterator from './Iterator';\n\nexport default class SkipIterator extends Iterator {\n  constructor(arr, count) {\n    super(arr);\n\n    if (!count || count < 1) {\n      throw new Error('The count must be larger than 0');\n    }\n\n    this.count = count;\n  }\n\n  *[Symbol.iterator]() {\n    for (let item of this.arr) {\n      yield item;\n\n      if (--this.count <= 0) {\n        break;\n      }\n    }\n  }\n}\n","import Iterator from './Iterator';\n\nexport default class SkipIterator extends Iterator {\n  constructor(arr, condition) {\n    super(arr);\n\n    if (typeof condition !== 'function') {\n      throw new Error('Condition must be a function');\n    }\n\n    this.condition = condition;\n  }\n\n  *[Symbol.iterator]() {\n    for (let item of this.arr) {\n      if (this.condition(item)) {\n        yield item;\n      }\n    }\n  }\n}\n","import SkipIterator from './WhereIterator';\n\nexport default class TakeWhileIterator extends SkipIterator {\n  constructor(arr, condition) {\n    super(arr, condition);\n  }\n\n  *[Symbol.iterator]() {\n    for (let item of this.arr) {\n      if (this.condition(item)) {\n        yield item;\n      } else {\n        break;\n      }\n    }\n  }\n}\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.aggregate = function aggregate(accumulator, initialValue) {\n  return new Iterator(this).aggregate(accumulator, initialValue);\n};\n","import Iterator from '../iterators/Iterator';\n\nIterator.prototype.aggregate = function aggregate(accumulator, initialValue) {\n  if (typeof accumulator !== 'function') {\n    throw new Error('Missing accumulator function');\n  }\n\n  let result;\n  let iterator = this[Symbol.iterator]();\n\n  if (typeof initialValue === 'undefined') {\n    result = iterator.next().value;\n  } else {\n    result = initialValue;\n  }\n\n  let current;\n  while ((current = iterator.next()) && current && !current.done) {\n    result = accumulator(result, current.value);\n  }\n  return result;\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.all = function all(condition) {\n  return new Iterator(this).all(condition);\n};\n","import Iterator from '../iterators/Iterator';\n\nIterator.prototype.all = function all(condition) {\n  if (!condition) {\n    throw new Error('Missing condition');\n  }\n\n  for (let item of this) {\n    if (!condition(item)) {\n      return false;\n    }\n  }\n  return true;\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.any = function any(condition) {\n  return new Iterator(this).any(condition);\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.first = function first(condition) {\n  return new Iterator(this).first(condition);\n};\n","import WhereIterator from '../iterators/WhereIterator';\n\nArray.prototype.where = function where(condition) {\n  return new WhereIterator(this, condition);\n};\n","import Iterator from '../iterators/Iterator';\nimport WhereIterator from '../iterators/WhereIterator';\n\nIterator.prototype.where = function where(condition) {\n  return new WhereIterator(this, condition);\n};\n","import Iterator from '../iterators/Iterator';\nimport '../where';\n\nIterator.prototype.first = function first(condition) {\n  if (condition) {\n    return this.where(condition).first();\n  } else {\n    return this[Symbol.iterator]().next().value;\n  }\n};\n","import Iterator from '../iterators/Iterator';\nimport '../first';\n\nIterator.prototype.any = function any(condition) {\n  return !!this.first(condition);\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.average = function average() {\n  return new Iterator(this).average();\n};\n","import Iterator from '../iterators/Iterator';\n\nIterator.prototype.average = function average() {\n  let sum = 0;\n  let count = 0;\n\n  for (let item of this) {\n    sum += item;\n    count++;\n  }\n\n  if (count > 0) {\n    return sum / count;\n  }\n\n  return NaN;\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.contains = function contains(value) {\n  return new Iterator(this).contains(value);\n};\n","import Iterator from '../iterators/Iterator';\nimport '../first';\n\nIterator.prototype.contains = function contains(value) {\n  if (typeof value === 'undefined') {\n    throw new Error('Missing value to compare with.');\n  }\n\n  return !!this.first(item => Object.is(item, value));\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.count = function count(condition) {\n  return new Iterator(this).count(condition);\n};\n","import Iterator from '../iterators/Iterator';\nimport '../where';\n\nIterator.prototype.count = function count(condition) {\n  if (condition) {\n    return this.where(condition).count();\n  } else {\n    let count = 0;\n    for (let item of this) {\n      count++;\n    }\n    return count;\n  }\n};\n","import DistinctIterator from '../iterators/DistinctIterator';\n\nArray.prototype.distinct = function distinct() {\n  return new DistinctIterator(this);\n};\n","import Iterator from '../iterators/Iterator';\nimport DistinctIterator from '../iterators/DistinctIterator';\n\nIterator.prototype.distinct = function distinct() {\n  return new DistinctIterator(this);\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.elementAt = function elementAt(index) {\n  return new Iterator(this).elementAt(index);\n};\n","import Iterator from '../iterators/Iterator';\n\nIterator.prototype.elementAt = function elementAt(index) {\n  for (let item of this) {\n    if (index-- === 0) {\n      return item;\n    }\n  }\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.max = function max() {\n  return new Iterator(this).max();\n};\n","import Iterator from '../iterators/Iterator';\n\nIterator.prototype.max = function max() {\n  return Math.max(...this);\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.min = function min() {\n  return new Iterator(this).min();\n};\n","import Iterator from '../iterators/Iterator';\n\nIterator.prototype.min = function min() {\n  return Math.min(...this);\n};\n","import Iterator from '../iterators/Iterator';\nimport SelectIterator from '../iterators/SelectIterator';\n\nArray.prototype.select = function select(callback) {\n  return new SelectIterator(this, callback);\n};\n","import Iterator from '../iterators/Iterator';\nimport SelectIterator from '../iterators/SelectIterator';\n\nIterator.prototype.select = function select(callback) {\n  return new SelectIterator(this, callback);\n};\n","import Iterator from '../iterators/Iterator';\nimport SelectManyIterator from '../iterators/SelectManyIterator';\n\nArray.prototype.selectMany = function selectMany(callback) {\n  return new SelectManyIterator(this, callback);\n};\n","import Iterator from '../iterators/Iterator';\nimport SelectManyIterator from '../iterators/SelectManyIterator';\n\nIterator.prototype.selectMany = function selectMany(callback) {\n  return new SelectManyIterator(this, callback);\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.single = function single(condition) {\n  return new Iterator(this).single(condition);\n};\n","import Iterator from '../iterators/Iterator';\nimport '../where';\n\nIterator.prototype.single = function single(condition) {\n  if (condition) {\n    return this.where(condition).single();\n  } else {\n    let iterator = this[Symbol.iterator]();\n    let first = iterator.next();\n    let result = first.value;\n\n    if (first.done) {\n      throw new Error('No elements in the iterable');\n    }\n\n    let second = iterator.next();\n    if (!second.done) {\n      throw new Error('More than one element found.');\n    }\n\n    return result;\n  }\n};\n","import SkipIterator from '../iterators/SkipIterator';\n\nArray.prototype.skip = function skip(count) {\n  return new SkipIterator(this, count);\n};\n","import Iterator from '../iterators/Iterator';\nimport SkipIterator from '../iterators/SkipIterator';\n\nIterator.prototype.skip = function skip(count) {\n  return new SkipIterator(this, count);\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.sum = function sum() {\n  return new Iterator(this).sum();\n};\n","import Iterator from '../iterators/Iterator';\nimport '../aggregate';\n\nIterator.prototype.sum = function sum() {\n  return this.aggregate((prev, curr) => prev + curr, 0);\n};\n","import TakeIterator from '../iterators/TakeIterator';\n\nArray.prototype.take = function take(count) {\n  return new TakeIterator(this, count);\n};\n","import Iterator from '../iterators/Iterator';\nimport TakeIterator from '../iterators/TakeIterator';\n\nIterator.prototype.take = function take(count) {\n  return new TakeIterator(this, count);\n};\n","import Iterator from '../iterators/Iterator';\nimport TakeWhileIterator from '../iterators/TakeWhileIterator';\n\nArray.prototype.takeWhile = function takeWhile(condition) {\n  return new TakeWhileIterator(this, condition);\n};\n","import Iterator from '../iterators/Iterator';\nimport TakeWhileIterator from '../iterators/TakeWhileIterator';\n\nIterator.prototype.takeWhile = function takeWhile(condition) {\n  return new TakeWhileIterator(this, condition);\n};\n"],"names":["Iterator","Symbol","iterator","this","arr","Array","from","keySelector","valueSelector","Error","map","Map","item","set","DistinctIterator","Set","has","add","SelectIterator","callback","SelectManyIterator","subItem","SkipIterator","count","index","isNaN","condition","TakeWhileIterator","prototype","aggregate","accumulator","initialValue","result","next","value","current","done","all","any","first","where","WhereIterator","average","sum","NaN","contains","Object","is","distinct","elementAt","max","Math","min","select","selectMany","single","skip","prev","curr","take","TakeIterator","takeWhile"],"mappings":"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"}