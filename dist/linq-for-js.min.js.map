{"version":3,"file":"linq-for-js.min.js","sources":["../src/iterators/Iterator.js","../src/iterators/DistinctIterator.js","../src/iterators/SelectIterator.js","../src/iterators/SelectManyIterator.js","../src/iterators/SkipIterator.js","../src/iterators/TakeIterator.js","../src/iterators/WhereIterator.js","../src/iterators/TakeWhileIterator.js","../src/aggregate/Array.prototype.aggregate.js","../src/aggregate/Iterator.aggregate.js","../src/all/Array.prototype.all.js","../src/all/Iterator.all.js","../src/any/Array.prototype.any.js","../src/first/Array.prototype.first.js","../src/where/Array.prototype.where.js","../src/where/Iterator.where.js","../src/first/Iterator.first.js","../src/any/Iterator.any.js","../src/average/Array.prototype.average.js","../src/average/Iterator.average.js","../src/contains/Array.prototype.contains.js","../src/contains/Iterator.contains.js","../src/count/Array.prototype.count.js","../src/count/Iterator.count.js","../src/distinct/Array.prototype.distinct.js","../src/distinct/Iterator.distinct.js","../src/elementAt/Array.prototype.elementAt.js","../src/elementAt/Iterator.elementAt.js","../src/max/Array.prototype.max.js","../src/max/Iterator.max.js","../src/min/Array.prototype.min.js","../src/min/Iterator.min.js","../src/select/Array.prototype.select.js","../src/select/Iterator.select.js","../src/selectMany/Array.prototype.selectMany.js","../src/selectMany/Iterator.selectMany.js","../src/single/Array.prototype.single.js","../src/single/Iterator.single.js","../src/skip/Array.prototype.skip.js","../src/skip/Iterator.skip.js","../src/sum/Array.prototype.sum.js","../src/sum/Iterator.sum.js","../src/take/Array.prototype.take.js","../src/take/Iterator.take.js","../src/takeWhile/Array.prototype.takeWhile.js","../src/takeWhile/Iterator.takeWhile.js"],"sourcesContent":["export default class Iterator {\n  constructor(arr) {\n    if (!arr) {\n      throw new Error('Iterable array is null or undefined');\n    }\n    if (!(arr instanceof Array || arr instanceof Iterator)) {\n      throw new Error('Invalid array type');\n    }\n\n    this.arr = arr;\n  }\n\n  [Symbol.iterator]() {\n    return this.arr[Symbol.iterator]();\n  }\n\n  toArray() {\n    return Array.from(this);\n  }\n\n  toMap(keySelector, valueSelector) {\n    if (typeof keySelector !== 'function') {\n      throw new Error('KeySelector must be a function.');\n    }\n    if (typeof valueSelector !== 'function') {\n      throw new Error('ValueSelector must be a function.');\n    }\n\n    let map = new Map();\n    for (let item of this) {\n      map.set(keySelector(item), valueSelector(item));\n    }\n\n    return map;\n  }\n}\n","import Iterator from './Iterator';\n\nexport default class DistinctIterator extends Iterator {\n  constructor(arr) {\n    super(arr);\n  }\n\n  *[Symbol.iterator]() {\n    let set = new Set();\n    for (let item of this.arr) {\n      if (set.has(item)) {\n        continue;\n      }\n\n      set.add(item);\n      yield item;\n    }\n  }\n}\n","import Iterator from './Iterator';\n\nexport default class SelectIterator extends Iterator {\n  constructor(arr, callback) {\n    super(arr);\n\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n\n    this.callback = callback;\n  }\n\n  *[Symbol.iterator]() {\n    for (let item of this.arr) {\n      yield this.callback(item);\n    }\n  }\n}\n","import Iterator from './Iterator';\n\nexport default class SelectManyIterator extends Iterator {\n  constructor(arr, callback) {\n    super(arr);\n\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n\n    this.callback = callback;\n  }\n\n  *[Symbol.iterator]() {\n    for (let item of this.arr) {\n      for (let subItem of this.callback(item)) {\n        yield subItem;\n      }\n    }\n  }\n}\n","import Iterator from './Iterator';\n\nexport default class SkipIterator extends Iterator {\n  constructor(arr, count) {\n    super(arr);\n\n    if (isNaN(count)) {\n      throw new Error('Missing count.');\n    }\n\n    if (count < 0) {\n      throw new Error('Count cannot be negative.');\n    }\n\n    this.count = count;\n  }\n\n  *[Symbol.iterator]() {\n    let index = this.count;\n    for (let item of this.arr) {\n      if (index-- > 0) {\n        continue;\n      } else {\n        yield item;\n      }\n    }\n  }\n}\n","import Iterator from './Iterator';\n\nexport default class SkipIterator extends Iterator {\n  constructor(arr, count) {\n    super(arr);\n\n    if (!count || count < 1) {\n      throw new Error('The count must be larger than 0');\n    }\n\n    this.count = count;\n  }\n\n  *[Symbol.iterator]() {\n    for (let item of this.arr) {\n      yield item;\n\n      if (--this.count <= 0) {\n        break;\n      }\n    }\n  }\n}\n","import Iterator from './Iterator';\n\nexport default class SkipIterator extends Iterator {\n  constructor(arr, condition) {\n    super(arr);\n\n    if (typeof condition !== 'function') {\n      throw new Error('Condition must be a function');\n    }\n\n    this.condition = condition;\n  }\n\n  *[Symbol.iterator]() {\n    for (let item of this.arr) {\n      if (this.condition(item)) {\n        yield item;\n      }\n    }\n  }\n}\n","import SkipIterator from './WhereIterator';\n\nexport default class TakeWhileIterator extends SkipIterator {\n  constructor(arr, condition) {\n    super(arr, condition);\n  }\n\n  *[Symbol.iterator]() {\n    for (let item of this.arr) {\n      if (this.condition(item)) {\n        yield item;\n      } else {\n        break;\n      }\n    }\n  }\n}\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.aggregate = function aggregate(accumulator, initialValue) {\n  return new Iterator(this).aggregate(accumulator, initialValue);\n};\n","import Iterator from '../iterators/Iterator';\n\nIterator.prototype.aggregate = function aggregate(accumulator, initialValue) {\n  if (typeof accumulator !== 'function') {\n    throw new Error('Missing accumulator function');\n  }\n\n  let result;\n  let iterator = this[Symbol.iterator]();\n\n  if (typeof initialValue === 'undefined') {\n    result = iterator.next().value;\n  } else {\n    result = initialValue;\n  }\n\n  let current;\n  while ((current = iterator.next()) && current && !current.done) {\n    result = accumulator(result, current.value);\n  }\n  return result;\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.all = function all(condition) {\n  return new Iterator(this).all(condition);\n};\n","import Iterator from '../iterators/Iterator';\n\nIterator.prototype.all = function all(condition) {\n  if (!condition) {\n    throw new Error('Missing condition');\n  }\n\n  for (let item of this) {\n    if (!condition(item)) {\n      return false;\n    }\n  }\n  return true;\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.any = function any(condition) {\n  return new Iterator(this).any(condition);\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.first = function first(condition) {\n  return new Iterator(this).first(condition);\n};\n","import WhereIterator from '../iterators/WhereIterator';\n\nArray.prototype.where = function where(condition) {\n  return new WhereIterator(this, condition);\n};\n","import Iterator from '../iterators/Iterator';\nimport WhereIterator from '../iterators/WhereIterator';\n\nIterator.prototype.where = function where(condition) {\n  return new WhereIterator(this, condition);\n};\n","import Iterator from '../iterators/Iterator';\nimport '../where';\n\nIterator.prototype.first = function first(condition) {\n  if (condition) {\n    return this.where(condition).first();\n  } else {\n    return this[Symbol.iterator]().next().value;\n  }\n};\n","import Iterator from '../iterators/Iterator';\nimport '../first';\n\nIterator.prototype.any = function any(condition) {\n  return !!this.first(condition);\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.average = function average() {\n  return new Iterator(this).average();\n};\n","import Iterator from '../iterators/Iterator';\n\nIterator.prototype.average = function average() {\n  let sum = 0;\n  let count = 0;\n\n  for (let item of this) {\n    sum += item;\n    count++;\n  }\n\n  if (count > 0) {\n    return sum / count;\n  }\n\n  return NaN;\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.contains = function contains(value) {\n  return new Iterator(this).contains(value);\n};\n","import Iterator from '../iterators/Iterator';\nimport '../first';\n\nIterator.prototype.contains = function contains(value) {\n  if (typeof value === 'undefined') {\n    throw new Error('Missing value to compare with.');\n  }\n\n  return !!this.first(item => Object.is(item, value));\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.count = function count(condition) {\n  return new Iterator(this).count(condition);\n};\n","import Iterator from '../iterators/Iterator';\nimport '../where';\n\nIterator.prototype.count = function count(condition) {\n  if (condition) {\n    return this.where(condition).count();\n  } else {\n    let count = 0;\n    for (let item of this) {\n      count++;\n    }\n    return count;\n  }\n};\n","import DistinctIterator from '../iterators/DistinctIterator';\n\nArray.prototype.distinct = function distinct() {\n  return new DistinctIterator(this);\n};\n","import Iterator from '../iterators/Iterator';\nimport DistinctIterator from '../iterators/DistinctIterator';\n\nIterator.prototype.distinct = function distinct() {\n  return new DistinctIterator(this);\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.elementAt = function elementAt(index) {\n  return new Iterator(this).elementAt(index);\n};\n","import Iterator from '../iterators/Iterator';\n\nIterator.prototype.elementAt = function elementAt(index) {\n  for (let item of this) {\n    if (index-- === 0) {\n      return item;\n    }\n  }\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.max = function max() {\n  return new Iterator(this).max();\n};\n","import Iterator from '../iterators/Iterator';\n\nIterator.prototype.max = function max() {\n  return Math.max(...this);\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.min = function min() {\n  return new Iterator(this).min();\n};\n","import Iterator from '../iterators/Iterator';\n\nIterator.prototype.min = function min() {\n  return Math.min(...this);\n};\n","import Iterator from '../iterators/Iterator';\nimport SelectIterator from '../iterators/SelectIterator';\n\nArray.prototype.select = function select(callback) {\n  return new SelectIterator(this, callback);\n};\n","import Iterator from '../iterators/Iterator';\nimport SelectIterator from '../iterators/SelectIterator';\n\nIterator.prototype.select = function select(callback) {\n  return new SelectIterator(this, callback);\n};\n","import Iterator from '../iterators/Iterator';\nimport SelectManyIterator from '../iterators/SelectManyIterator';\n\nArray.prototype.selectMany = function selectMany(callback) {\n  return new SelectManyIterator(this, callback);\n};\n","import Iterator from '../iterators/Iterator';\nimport SelectManyIterator from '../iterators/SelectManyIterator';\n\nIterator.prototype.selectMany = function selectMany(callback) {\n  return new SelectManyIterator(this, callback);\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.single = function single(condition) {\n  return new Iterator(this).single(condition);\n};\n","import Iterator from '../iterators/Iterator';\nimport '../where';\n\nIterator.prototype.single = function single(condition) {\n  if (condition) {\n    return this.where(condition).single();\n  } else {\n    let iterator = this[Symbol.iterator]();\n    let first = iterator.next();\n    let result = first.value;\n\n    if (first.done) {\n      throw new Error('No elements in the iterable');\n    }\n\n    let second = iterator.next();\n    if (!second.done) {\n      throw new Error('More than one element found.');\n    }\n\n    return result;\n  }\n};\n","import SkipIterator from '../iterators/SkipIterator';\n\nArray.prototype.skip = function skip(count) {\n  return new SkipIterator(this, count);\n};\n","import Iterator from '../iterators/Iterator';\nimport SkipIterator from '../iterators/SkipIterator';\n\nIterator.prototype.skip = function skip(count) {\n  return new SkipIterator(this, count);\n};\n","import Iterator from '../iterators/Iterator';\n\nArray.prototype.sum = function sum() {\n  return new Iterator(this).sum();\n};\n","import Iterator from '../iterators/Iterator';\nimport '../aggregate';\n\nIterator.prototype.sum = function sum() {\n  return this.aggregate((prev, curr) => prev + curr, 0);\n};\n","import TakeIterator from '../iterators/TakeIterator';\n\nArray.prototype.take = function take(count) {\n  return new TakeIterator(this, count);\n};\n","import Iterator from '../iterators/Iterator';\nimport TakeIterator from '../iterators/TakeIterator';\n\nIterator.prototype.take = function take(count) {\n  return new TakeIterator(this, count);\n};\n","import Iterator from '../iterators/Iterator';\nimport TakeWhileIterator from '../iterators/TakeWhileIterator';\n\nArray.prototype.takeWhile = function takeWhile(condition) {\n  return new TakeWhileIterator(this, condition);\n};\n","import Iterator from '../iterators/Iterator';\nimport TakeWhileIterator from '../iterators/TakeWhileIterator';\n\nIterator.prototype.takeWhile = function takeWhile(condition) {\n  return new TakeWhileIterator(this, condition);\n};\n"],"names":["Iterator","arr","Error","Array","Symbol","iterator","this","from","keySelector","valueSelector","map","Map","item","set","DistinctIterator","Set","has","add","SelectIterator","callback","SelectManyIterator","subItem","SkipIterator","count","isNaN","index","condition","TakeWhileIterator","prototype","aggregate","accumulator","initialValue","result","next","value","current","done","all","any","first","where","WhereIterator","average","sum","NaN","contains","Object","is","distinct","elementAt","max","Math","min","select","selectMany","single","skip","prev","curr","take","TakeIterator","takeWhile"],"mappings":"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"}